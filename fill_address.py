import os
import time
from dotenv import load_dotenv
from supabase import create_client
from openai import OpenAI

load_dotenv()

# Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_ROLE_KEY = os.getenv("SUPABASE_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_ROLE_KEY)

# OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def generate_address(name, latitude, longitude):
    prompt = (
        f"–¢—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–∑–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}\n"
        f"–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '—É–ª. —Ç–∞–∫–∞—è-—Ç–æ, –≥–æ—Ä–æ–¥ —Ç–∞–∫–æ–π-—Ç–æ' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '—Ä–∞–π–æ–Ω —Ç–∞–∫–æ–π-—Ç–æ, –≥–æ—Ä–æ–¥'."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
            max_tokens=100
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–¥—Ä–µ—Å–µ –¥–ª—è '{name}': {e}")
        return None

def update_addresses():
    print("üìç –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –∞–¥—Ä–µ—Å–∞...")

    data = supabase.table("attractions") \
        .select("id, name, latitude, longitude, address") \
        .is_("address", "null") \
        .limit(1000) \
        .execute()

    attractions = data.data
    print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ {len(attractions)} –æ–±—ä–µ–∫—Ç–æ–≤\n")

    for item in attractions:
        name = item["name"]
        lat = item.get("latitude")
        lon = item.get("longitude")

        if not lat or not lon:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ '{name}' ‚Äî –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            continue

        address = generate_address(name, lat, lon)
        if address:
            supabase.table("attractions") \
                .update({"address": address}) \
                .eq("id", item["id"]) \
                .execute()
            print(f"‚úÖ {name} ‚Äî {address}")
        else:
            print(f"‚õî {name} ‚Äî –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

        time.sleep(1)

if __name__ == "__main__":
    update_addresses()
