from fastapi import FastAPI, Request
from langchain.agents import initialize_agent, Tool
from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from openai import OpenAI as OpenAIClient     # ü§ñ –î–ª—è embedding
from supabase import create_client
import os
from dotenv import load_dotenv
from langchain.tools import tool
from fastapi.responses import PlainTextResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime

load_dotenv()

# üîê Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# üîê OpenAI
client = OpenAIClient(api_key=os.getenv("OPENAI_API_KEY"))  # –¥–ª—è embedding
llm = ChatOpenAI(temperature=0.7, model_name="gpt-4")

# ‚ú®Ô∏è –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

@app.post("/chat-history")
async def save_message(request: Request):
    data = await request.json()

    required_fields = ["user_id", "session_id", "role", "message"]
    for field in required_fields:
        if field not in data:
            return JSONResponse(status_code=400, content={"error": f"Missing field: {field}"})

    insert_data = {
        "user_id": data["user_id"],
        "session_id": data["session_id"],
        "role": data["role"],
        "message": data["message"],
        "message_type": data.get("message_type", "text"),
        "raw_gpt_response": data.get("raw_gpt_response"),
        "created_at": datetime.utcnow().isoformat()
    }

    supabase.table("chat_history").insert([insert_data]).execute()
    return {"status": "ok"}

@app.get("/chat-history")
def get_history(user_id: str, session_id: str):
    response = supabase.table("chat_history") \
        .select("role, message, message_type") \
        .eq("user_id", user_id) \
        .eq("session_id", session_id) \
        .order("created_at", desc=True) \
        .limit(20) \
        .execute()

    return {"messages": list(reversed(response.data))}


# üéØ –¢—É–ª: –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def search_attractions(query: str) -> str:
    try:
        city, category = query.split('|')
    except ValueError:
        return "–§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –≥–æ—Ä–æ–¥|–∫–∞—Ç–µ–≥–æ—Ä–∏—è"

    response = supabase.table('attractions')\
        .select("name, description, category, city, rating")\
        .ilike("city", f"%{city.strip()}%")\
        .ilike("category", f"%{category.strip()}%")\
        .order("rating", desc=True)\
        .limit(5)\
        .execute()

    if not response.data:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É"

    return "\n\n".join([
        f"{r['name']} ({r['category']}, {r['city']}) ‚Äì {r['description'] or '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
        for r in response.data
    ])

# üéØ –¢—É–ª: –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
def semantic_search(query: str) -> str:
    try:
        embedding_response = client.embeddings.create(
            input=[query],
            model="text-embedding-ada-002"
        )
        embedding = embedding_response.data[0].embedding

        response = supabase.rpc("match_attractions", {
            "query_embedding": embedding,
            "match_threshold": 0.85,
            "match_count": 5
        }).execute()

        if not response.data:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–º—ã—Å–ª–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"

        return "\n\n".join([
            f"{r['name']} ({r['category']}, {r['city']}) ‚Äì {r['description'] or '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
            for r in response.data
        ])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ semantic_search: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"
    
def geocode_address(location_text: str) -> tuple[float, float]:
    prompt = (
        f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_text}.\n"
        f"–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'LAT, LON' ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: '43.5855, 39.7231'."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2,
            max_tokens=30
        )
        coords = response.choices[0].message.content.strip().split(",")
        return float(coords[0]), float(coords[1])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ geocode_address: {e}")
        return None, None

def find_nearby_attractions(lat: float, lon: float, radius_km=3.0) -> list:
    try:
        response = supabase.rpc("find_nearby_attractions", {
            "origin_lat": lat,
            "origin_lon": lon,
            "radius_km": radius_km
        }).execute()

        return response.data or []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—á–µ–∫ —Ä—è–¥–æ–º: {e}")
        return []
    
def generate_route_description(points: list) -> str:
    if not points:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞."

    walking = [p for p in points if p['distance'] <= 2]
    driving = [p for p in points if p['distance'] > 2]

    def format_block(title: str, list_: list) -> str:
        if not list_:
            return f"{title}: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        return f"{title}:\n" + "\n".join([
            f"- {p['name']} ({p['category']}, {round(p['distance'], 2)} –∫–º, —Ä–µ–π—Ç–∏–Ω–≥ {p.get('rating') or '‚Äî'})\n  {p.get('address', '–∞–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}.\n  {p['description'] or ''}"
            for p in list_
        ])

    walking_text = format_block("–ü–µ—à–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã", walking)
    driving_text = format_block("–ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –º–∞—à–∏–Ω–µ", driving)

    prompt = (
        f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å –¥–µ—Ç—å–º–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ A.\n\n"
        f"{walking_text}\n\n"
        f"{driving_text}\n\n"
        f"–°–æ—Å—Ç–∞–≤—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø–æ—Ç–æ–º ‚Äî –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ–µ—Ö–∞—Ç—å.\n"
        f"–ù–∞–ø–∏—à–∏ –ª–µ–≥–∫–æ, —á–µ–ª–æ–≤–µ—á–Ω–æ, —Å –ø–æ–Ω—è—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –ú–∞–∫—Å–∏–º—É–º 2 –∞–±–∑–∞—Ü–∞."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=400
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞."
    
def plan_walk_from_location(location_text: str) -> str:
    lat, lon = geocode_address(location_text)
    if not lat or not lon:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"

    nearby = find_nearby_attractions(lat, lon)
    return generate_route_description(nearby)

def find_child_friendly_places(lat: float, lon: float) -> str:
    points = find_nearby_attractions(lat, lon)
    child_related = [p for p in points if '–¥–µ—Ç' in (p['description'] or '').lower() or '–ø–∞—Ä–∫' in (p['category'] or '').lower()]
    return "\n".join([f"{p['name']} ‚Äì {p['description']}" for p in child_related])

def semantic_search_nearby(query: str, lat: float, lon: float, radius_km: float = 2.0) -> str:
    try:
        # –ü–æ–ª—É—á–∞–µ–º embedding
        embedding_response = client.embeddings.create(
            input=[query],
            model="text-embedding-ada-002"
        )
        embedding = embedding_response.data[0].embedding

        # –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Supabase (—á–µ—Ä–µ–∑ RPC)
        response = supabase.rpc("match_attractions", {
            "query_embedding": embedding,
            "match_threshold": 0.82,
            "match_count": 8,
            "user_lat": lat,
            "user_lon": lon,
            "radius_km": radius_km
        }).execute()

        if not response.data:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏."

        return "\n\n".join([
            f"{r['name']} ({r['category']}, {r['city']}) ‚Äî {round(r['distance_km'], 2)} –∫–º ‚Äî {r['description'] or '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
            for r in response.data
        ])

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ semantic_search_nearby: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ."

def semantic_walk_search(query: str) -> str:
    # –ü–æ–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã (–ú–æ—Ä—Å–∫–æ–π –≤–æ–∫–∑–∞–ª –°–æ—á–∏)
    lat = 43.5814
    lon = 39.7181
    return semantic_search_nearby(query, lat, lon, radius_km=2)

def semantic_drive_search(query: str) -> str:
    lat = 43.5814
    lon = 39.7181
    return semantic_search_nearby(query, lat, lon, radius_km=50)

def semantic_geo_search(query: str) -> str:
    try:
        user_lat = 43.5814  # –ø–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ ‚Äî –ú–æ—Ä—Å–∫–æ–π –≤–æ–∫–∑–∞–ª
        user_lon = 39.7181
        radius_km = 3.0

        # 1. –ü–æ–ª—É—á–∞–µ–º embedding
        embedding_response = client.embeddings.create(
            input=[query],
            model="text-embedding-ada-002"
        )
        embedding = embedding_response.data[0].embedding

        # 2. RPC-–≤—ã–∑–æ–≤
        response = supabase.rpc("match_attractions", {
            "query_embedding": embedding,
            "match_threshold": 0.82,
            "match_count": 8,
            "user_lat": user_lat,
            "user_lon": user_lon,
            "radius_km": radius_km
        }).execute()

        data = response.data
        if not data:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º —Å –≤–∞–º–∏."

        # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–∞—Å–∏–≤–æ
        result = "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:\n\n"
        for p in data:
            result += (
                f"üìç *{p['name']}* ({p['category']}, {round(p['distance_km'], 2)} –∫–º)\n"
                f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {p.get('rating', '‚Äî')}  \n"
                f"üì¨ –ê–¥—Ä–µ—Å: {p.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}  \n"
                f"üìù {p['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            )

        return result.strip()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ semantic_geo_search: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–ø–æ–∏—Å–∫–µ"

# üß† –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º Tool'—ã
tools = [
    Tool(
        name="search_attractions",
        func=search_attractions,
        description=(
            "Use to find attractions by city and category. "
            "Format: '–°–æ—á–∏|–ø–∞—Ä–∫'. Categories: –ø–∞—Ä–∫, –ø—Ä–∏—Ä–æ–¥–∞, –µ–¥–∞, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö"
        )
    ),
    Tool(
        name="semantic_search",
        func=semantic_search,
        description="Use to find attractions by meaning. Natural query like '–∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å —Å –¥–µ—Ç—å–º–∏ –≤ –°–æ—á–∏'"
    ),
    Tool(
        name="plan_walk_from_location",
        func=plan_walk_from_location,
        description="–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ø –≤ –æ—Ç–µ–ª–µ –†—ç–¥–∏—Å–æ–Ω –≤ –°–æ—á–∏')",
        return_direct=True
    ),
    Tool(  # —Ç—ã –¥–≤–∞–∂–¥—ã –≤—Å—Ç–∞–≤–∏–ª search_attractions ‚Äî —ç—Ç–æ—Ç –¥—É–±–ª–∏–∫–∞—Ç —É–¥–∞–ª—è—é
        name="semantic_walk_search",
        func=semantic_walk_search,
        description="–ò—â–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –ø–µ—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–¥–æ 2 –∫–º). –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –∫–∞–∫ –µ—Å—Ç—å –≤ –≤—ã–≤–æ–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–µ –≤—ã–∫–∏–¥—ã–≤–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ.",
        return_direct=True
    ),
    Tool(
        name="semantic_drive_search",
        func=semantic_drive_search,
        description="–ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –º–∞—à–∏–Ω–µ (–¥–æ 50 –∫–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫—É–¥–∞ –º–æ–∂–Ω–æ —Å—ä–µ–∑–¥–∏—Ç—å —Å –¥–µ—Ç—å–º–∏ –Ω–∞ —Ü–µ–ª—ã–π –¥–µ–Ω—å'",
        return_direct=True
    ),
    Tool(
        name="semantic_geo_search",
        func=semantic_geo_search,
        description="–ù–∞–π–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —Å–º—ã—Å–ª–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –≥–µ–æ-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.",
        return_direct=True
    )
]

# üß† –ü–∞–º—è—Ç—å (–Ω–∞ –æ–¥–∏–Ω —Å–µ–∞–Ω—Å)
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

# ü§ñ GPT –∞–≥–µ–Ω—Ç —Å –ø–∞–º—è—Ç—å—é
agent = initialize_agent(
    tools,
    llm,
    agent="chat-conversational-react-description",
    verbose=True,
    memory=memory,
    agent_kwargs={
        "system_message": (
            "–¢—ã —Ç—Ä–µ–≤–µ–ª-–±–æ—Ç Joy. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –≤—ã–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–µ—Å—Ç–∞, —É—á–µ—Å—Ç—å –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—ã.\n\n"
            "1. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –ø–æ–º–æ—â–Ω–∏–∫.\n"
            "2. –í—Å–µ–≥–¥–∞ —É—Ç–æ—á–Ω–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–¢—ã —Ö–æ—á–µ—à—å –æ—Ç–¥—ã—Ö —É –º–æ—Ä—è –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É –ø–æ –≥–æ—Ä–æ–¥—É?¬ª).\n"
            "3. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Tool ‚Äî –≤—Å—Ç–∞–≤–ª—è–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –µ—Å—Ç—å (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∑–∏), –Ω–æ –¥–æ–±–∞–≤–ª—è–π –ª—ë–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: ¬´–í–æ—Ç —á—Ç–æ –Ω–∞—à—ë–ª¬ª –∏–ª–∏ ¬´–°–º–æ—Ç—Ä–∏, –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã¬ª.\n"
            "4. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–∞–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ Tool'—ã.\n"
            "5. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç Tool –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n"
            "6. –°–ø—Ä–∞—à–∏–≤–∞–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞, –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –∏–ª–∏ —Å—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç."
        )
    }
)

@app.post("/chat", response_class=PlainTextResponse)
async def chat(request: Request):
    body = await request.json()
    query = body.get("query", "")
    result = agent.run(query)
    return result